================================================================================
VFSCORE VARIANT IDENTIFICATION - QUICK REFERENCE FOR FIXES
================================================================================

CORE PROBLEM
============
item_id assumed unique globally, but actual key is (product_id, variant)

4 products affected:
  - 188368: 2 variants
  - 335888: 1 variant (curved-backrest)
  - 369578: 2 variants
  - 558736: 2 variants

IMMEDIATE IMPACTS
=================
1. Variants dropped at ingest (line 59 of ingest.py)
2. Output directories collapse multiple variants
3. Scoring results overwrite across variants
4. Final results merged and ambiguous

MODULE CHANGES NEEDED
=====================

1. SRC/VFSCORE/INGEST.PY
   Lines affected: 40-62 (scan_generated), 91-121 (create_manifest)
   
   Required:
   - Add function: extract_variant(filename, product_id) -> str
   - Change scan_references return: Dict[Tuple[str, str], List[Path]]
   - Change scan_generated return: Dict[Tuple[str, str], Path]
   - Handle multiple GLB files properly (all variants kept)
   - Add to manifest: product_id, variant, composite item_id
   
   Example composite item_id: "558736_default" or "335888_curved-backrest"

2. SRC/VFSCORE/PREPROCESS_GT.PY
   Lines affected: 56-62
   
   Required:
   - Extract variant from manifest record
   - Change path: 
     OLD: config.paths.out_dir / "preprocess" / "refs" / item_id / f"gt_{idx}.png"
     NEW: config.paths.out_dir / "preprocess" / "refs" / product_id / variant / f"gt_{idx}.png"

3. SRC/VFSCORE/RENDER_CYCLES.PY
   Lines affected: 184-190
   
   Required:
   - Extract variant from manifest record
   - Change path:
     OLD: config.paths.out_dir / "preprocess" / "cand" / item_id / "candidate.png"
     NEW: config.paths.out_dir / "preprocess" / "cand" / product_id / variant / "candidate.png"

4. SRC/VFSCORE/PACKETIZE.PY
   Lines affected: 32-37 (directory lookups), 77-88 (packet structure)
   
   Required:
   - Update create_labeled_images signature to accept variant
   - Change ref/cand path lookups to include variant
   - Update packet JSON: add product_id, variant, item_id fields
   - Update output_dir to include variant subdirectory

5. SRC/VFSCORE/SCORING.PY
   Lines affected: 131-147 (context), 220-225 (output_dir)
   
   Required:
   - Update context dict: add product_id, variant fields
   - Change output_dir:
     OLD: base_llm_calls_dir / model_dir_name / item_id / batch_dir_name
     NEW: base_llm_calls_dir / model_dir_name / product_id / variant / batch_dir_name

6. SRC/VFSCORE/AGGREGATE.PY
   Lines affected: 163 (function signature), 176 (directory path), 263-286 (manifest enrichment)
   
   Required:
   - Change function signature:
     OLD: def aggregate_item(item_id: str, llm_calls_dir: Path, ...)
     NEW: def aggregate_item(product_id: str, variant: Optional[str], llm_calls_dir: Path, ...)
   - Update directory path construction
   - Add variant to CSV headers and enrichment
   - Modify item_ids discovery to use (product_id, variant) tuples

7. SRC/VFSCORE/REPORT.PY
   Lines affected: 355-360 (image loading)
   
   Required:
   - Extract product_id and variant from results
   - Update directory paths:
     OLD: item_labels_dir = labels_dir / item_id
     NEW: item_labels_dir = labels_dir / product_id / (variant or "default")

DATA MODEL CHANGES
==================

manifest.jsonl
--------------
CURRENT:
{"item_id": "558736", "ref_paths": [...], "glb_path": "...", "l1": "...", ...}

REQUIRED:
{"product_id": "558736", "variant": null, "item_id": "558736_default", 
 "ref_paths": [...], "glb_path": "...", "l1": "...", ...}

Packet JSON (in labels/ directories)
-------------------------------------
CURRENT:
{"item_id": "558736", "l1": "...", ...}

REQUIRED:
{"product_id": "558736", "variant": null, "item_id": "558736_default", 
 "l1": "...", ...}

Results CSV
-----------
CURRENT HEADERS:
item_id, l1, l2, l3, n_gt, final_score, confidence, mad, n_batches, n_total_repeats, ...

REQUIRED HEADERS:
product_id, variant, item_id, l1, l2, l3, n_gt, final_score, confidence, mad, 
n_batches, n_total_repeats, ...

FILE STRUCTURE CHANGES
======================

outputs/preprocess/refs/
  CURRENT:  {product_id}/gt_*.png
  REQUIRED: {product_id}/{variant or "default"}/gt_*.png

outputs/preprocess/cand/
  CURRENT:  {product_id}/candidate.png
  REQUIRED: {product_id}/{variant or "default"}/candidate.png

outputs/labels/
  CURRENT:  {product_id}/packet.json, gt_*_labeled.png, candidate_labeled.png
  REQUIRED: {product_id}/{variant or "default"}/packet.json, ...

outputs/llm_calls/{model}/
  CURRENT:  {product_id}/batch_.../rep_*.json
  REQUIRED: {product_id}/{variant or "default"}/batch_.../rep_*.json

KEY CODE PATTERNS
=================

Variant Extraction Function (add to ingest.py):
  def extract_variant(filename: str, product_id: str) -> Optional[str]:
      if not filename.startswith(product_id):
          return None
      rest = filename[len(product_id):]
      if rest.startswith("__"):
          return None  # default variant
      elif rest.startswith("_"):
          parts = rest[1:].split("_")
          return parts[0]
      return None

Composite Item ID (use everywhere):
  item_id = f"{product_id}_{variant or 'default'}"

Directory Path Pattern (use everywhere):
  variant_dir = variant or "default"
  output_path = base_dir / product_id / variant_dir / filename

VALIDATION CHECKLIST
====================

After implementation:
[ ] All 4 multi-variant products have all variants in manifest.jsonl
[ ] manifest.jsonl has product_id, variant, and composite item_id fields
[ ] All output directories include variant subdirectory
[ ] No files overwrite across variants
[ ] Scoring results separate per variant
[ ] Aggregation results include product_id and variant columns
[ ] Report displays all variants
[ ] CSV exports have product_id and variant columns
[ ] All tests pass with multi-variant products

TESTING STRATEGY
================

1. Unit tests:
   - extract_variant() function with various patterns
   - Manifest creation with multi-variant products
   - Directory structure validation

2. Integration tests:
   - Run full pipeline with product 558736 (2 variants)
   - Verify both variants processed
   - Verify no file overwrites
   - Verify separate scores per variant
   - Verify CSV has 2 rows for product 558736

3. End-to-end tests:
   - Full pipeline with all 4 multi-variant products
   - Verify output integrity
   - Verify report completeness

ESTIMATED EFFORT
================
- Per-module changes: 4-8 hours
- Data model updates: 2-3 hours
- Testing: 3-4 hours
- Total: ~15-20 hours

RISK FACTORS
============
- BREAKING CHANGES to manifest format
- Requires migration of existing results
- Large refactoring affects core pipeline
- Extensive testing needed

================================================================================

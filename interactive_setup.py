#!/usr/bin/env python3
"""
VFScore Interactive Setup Script
=================================
This script helps new developers set up VFScore on their machine.
It will ask for necessary configuration values and create local config files.
"""

import os
import sys
import platform
from pathlib import Path
from typing import Optional


class Colors:
    """Terminal colors for better UX."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def print_header(text: str) -> None:
    """Print a styled header."""
    print(f"\n{Colors.HEADER}{Colors.BOLD}{'=' * 70}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{text.center(70)}{Colors.ENDC}")
    print(f"{Colors.HEADER}{Colors.BOLD}{'=' * 70}{Colors.ENDC}\n")


def print_success(text: str) -> None:
    """Print success message."""
    print(f"{Colors.OKGREEN}✓ {text}{Colors.ENDC}")


def print_warning(text: str) -> None:
    """Print warning message."""
    print(f"{Colors.WARNING}⚠ {text}{Colors.ENDC}")


def print_error(text: str) -> None:
    """Print error message."""
    print(f"{Colors.FAIL}✗ {text}{Colors.ENDC}")


def print_info(text: str) -> None:
    """Print info message."""
    print(f"{Colors.OKCYAN}ℹ {text}{Colors.ENDC}")


def find_blender_path() -> Optional[Path]:
    """Try to auto-detect Blender installation."""
    system = platform.system()
    
    common_paths = []
    
    if system == "Windows":
        common_paths = [
            Path("C:/Program Files/Blender Foundation/Blender 4.5/blender.exe"),
            Path("C:/Program Files/Blender Foundation/Blender 4.4/blender.exe"),
            Path("C:/Program Files/Blender Foundation/Blender 4.3/blender.exe"),
            Path("C:/Program Files/Blender Foundation/Blender 4.2/blender.exe"),
            Path("C:/Program Files (x86)/Blender Foundation/Blender 4.5/blender.exe"),
        ]
    elif system == "Darwin":  # macOS
        common_paths = [
            Path("/Applications/Blender.app/Contents/MacOS/Blender"),
        ]
    elif system == "Linux":
        common_paths = [
            Path("/usr/bin/blender"),
            Path("/usr/local/bin/blender"),
            Path(os.path.expanduser("~/blender/blender")),
        ]
    
    for path in common_paths:
        if path.exists():
            return path
    
    return None


def ask_question(prompt: str, default: str = "", required: bool = True) -> str:
    """Ask user a question and return the answer."""
    if default:
        prompt_with_default = f"{prompt} [{default}]: "
    else:
        prompt_with_default = f"{prompt}: "
    
    while True:
        answer = input(prompt_with_default).strip()
        
        if answer:
            return answer
        elif default:
            return default
        elif not required:
            return ""
        else:
            print_error("This field is required. Please provide a value.")


def ask_yes_no(prompt: str, default: bool = True) -> bool:
    """Ask a yes/no question."""
    default_str = "Y/n" if default else "y/N"
    answer = input(f"{prompt} [{default_str}]: ").strip().lower()
    
    if not answer:
        return default
    
    return answer in ['y', 'yes', '1', 'true']


def create_env_file(project_root: Path) -> None:
    """Create .env file with API keys."""
    print_header("API Keys Configuration")
    
    env_file = project_root / ".env"
    
    if env_file.exists():
        overwrite = ask_yes_no("⚠️  .env file already exists. Overwrite?", default=False)
        if not overwrite:
            print_info("Skipping .env creation")
            return
    
    print("\nGet your Gemini API key from: https://aistudio.google.com/app/apikey")
    gemini_key = ask_question("Enter your GEMINI_API_KEY", required=True)
    
    print("\nOpenAI API key is optional (for Phase 2 - GPT-4V support)")
    openai_key = ask_question("Enter your OPENAI_API_KEY (optional)", required=False)
    
    # Write .env file
    with open(env_file, "w", encoding="utf-8") as f:
        f.write("# VFScore Environment Variables\n")
        f.write("# Generated by setup.py\n\n")
        f.write(f"GEMINI_API_KEY={gemini_key}\n")
        if openai_key:
            f.write(f"OPENAI_API_KEY={openai_key}\n")
    
    print_success(f"Created .env file at {env_file}")


def create_local_config(project_root: Path) -> None:
    """Create config.local.yaml with user-specific settings."""
    print_header("Local Configuration")
    
    config_local = project_root / "config.local.yaml"
    
    if config_local.exists():
        overwrite = ask_yes_no("⚠️  config.local.yaml already exists. Overwrite?", default=False)
        if not overwrite:
            print_info("Skipping config.local.yaml creation")
            return
    
    # Try to find Blender
    print("\n🔍 Searching for Blender installation...")
    detected_blender = find_blender_path()
    
    if detected_blender:
        print_success(f"Found Blender at: {detected_blender}")
        use_detected = ask_yes_no("Use this Blender installation?", default=True)
        
        if use_detected:
            blender_path = str(detected_blender)
        else:
            blender_path = ask_question("Enter Blender executable path", required=True)
    else:
        print_warning("Could not auto-detect Blender installation")
        blender_path = ask_question("Enter Blender executable path", required=True)
    
    # Validate Blender path
    if not Path(blender_path).exists():
        print_warning(f"Warning: Blender executable not found at {blender_path}")
        print_info("You can update this later in config.local.yaml")
    
    # Ask for other optional settings
    print("\n📊 Optional: Customize rendering settings")
    customize = ask_yes_no("Do you want to customize render samples?", default=False)
    
    samples = None
    if customize:
        samples = ask_question("Render samples (default: 256, lower = faster)", default="256")
    
    # Write config.local.yaml
    with open(config_local, "w", encoding="utf-8") as f:
        f.write("# VFScore Local Configuration\n")
        f.write("# This file is user-specific and NOT committed to git\n")
        f.write("# Generated by setup.py\n\n")
        f.write("paths:\n")
        f.write(f'  blender_exe: "{blender_path}"\n')
        
        if samples:
            f.write("\nrender:\n")
            f.write(f"  samples: {samples}\n")
    
    print_success(f"Created config.local.yaml at {config_local}")


def install_dependencies(project_root: Path) -> None:
    """Install Python dependencies."""
    print_header("Python Dependencies")
    
    install = ask_yes_no("Install Python dependencies now?", default=True)
    
    if not install:
        print_info("Skipped dependency installation")
        print_info("Run 'pip install -e .' manually when ready")
        return
    
    print("\n📦 Installing dependencies...")
    
    try:
        import subprocess
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "-e", "."],
            cwd=project_root,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print_success("Dependencies installed successfully")
        else:
            print_error("Failed to install dependencies")
            print(result.stderr)
    except Exception as e:
        print_error(f"Error installing dependencies: {e}")
        print_info("Please run 'pip install -e .' manually")


def verify_setup(project_root: Path) -> None:
    """Verify the setup by running tests."""
    print_header("Setup Verification")
    
    verify = ask_yes_no("Run setup verification tests?", default=True)
    
    if not verify:
        print_info("Skipped verification")
        return
    
    print("\n🔍 Verifying setup...")
    
    # Check .env file
    env_file = project_root / ".env"
    if env_file.exists():
        print_success(".env file exists")
    else:
        print_error(".env file not found")
    
    # Check config.local.yaml
    config_local = project_root / "config.local.yaml"
    if config_local.exists():
        print_success("config.local.yaml exists")
    else:
        print_warning("config.local.yaml not found (optional)")
    
    # Try importing vfscore
    try:
        sys.path.insert(0, str(project_root / "src"))
        import vfscore
        print_success(f"vfscore package imported (v{vfscore.__version__})")
    except ImportError as e:
        print_error(f"Failed to import vfscore: {e}")
    
    # Run test script if available
    test_script = project_root / "tests" / "test_setup.py"
    if test_script.exists():
        run_tests = ask_yes_no("\nRun full setup tests?", default=True)
        
        if run_tests:
            try:
                import subprocess
                result = subprocess.run(
                    [sys.executable, str(test_script)],
                    cwd=project_root,
                    capture_output=False
                )
                
                if result.returncode == 0:
                    print_success("\nSetup verification passed!")
                else:
                    print_warning("\nSome tests failed. Check output above.")
            except Exception as e:
                print_error(f"Error running tests: {e}")


def print_next_steps() -> None:
    """Print next steps for the user."""
    print_header("Setup Complete!")
    
    print(f"{Colors.OKGREEN}{Colors.BOLD}✓ VFScore setup is complete!{Colors.ENDC}\n")
    
    print(f"{Colors.BOLD}Next Steps:{Colors.ENDC}")
    print("  1. Activate your virtual environment:")
    
    if platform.system() == "Windows":
        print(f"     {Colors.OKCYAN}.\\venv\\Scripts\\activate{Colors.ENDC}")
    else:
        print(f"     {Colors.OKCYAN}source venv/bin/activate{Colors.ENDC}")
    
    print("\n  2. Test the installation:")
    print(f"     {Colors.OKCYAN}vfscore --version{Colors.ENDC}")
    
    print("\n  3. Run the complete pipeline:")
    print(f"     {Colors.OKCYAN}vfscore run-all{Colors.ENDC}")
    
    print("\n  4. View the documentation:")
    print(f"     - README.md - Project overview")
    print(f"     - SETUP.md - Detailed setup guide")
    print(f"     - CONTRIBUTING.md - Developer guide")
    
    print(f"\n{Colors.BOLD}Configuration Files:{Colors.ENDC}")
    print(f"  • .env - Your API keys (DO NOT COMMIT)")
    print(f"  • config.local.yaml - Your local settings (DO NOT COMMIT)")
    print(f"  • config.yaml - Shared default settings (safe to commit)")
    
    print(f"\n{Colors.WARNING}⚠️  Important:{Colors.ENDC}")
    print(f"  Never commit .env or config.local.yaml to git!")
    print(f"  These files contain personal/sensitive information.\n")


def main() -> int:
    """Main setup function."""
    # Get project root
    project_root = Path(__file__).parent.absolute()
    
    # Welcome message
    print_header("VFScore Interactive Setup")
    
    print(f"{Colors.BOLD}Welcome to VFScore!{Colors.ENDC}\n")
    print("This script will help you set up VFScore for development.")
    print("It will create configuration files specific to your machine.\n")
    
    print_warning("Note: This setup is for the Python environment only.")
    print_warning("Make sure you have:")
    print("  • Python 3.11+ installed")
    print("  • Blender 4.2+ installed")
    print("  • Git for version control\n")
    
    ready = ask_yes_no("Ready to begin setup?", default=True)
    
    if not ready:
        print_info("Setup cancelled")
        return 1
    
    try:
        # Step 1: Create .env file
        create_env_file(project_root)
        
        # Step 2: Create config.local.yaml
        create_local_config(project_root)
        
        # Step 3: Install dependencies
        install_dependencies(project_root)
        
        # Step 4: Verify setup
        verify_setup(project_root)
        
        # Step 5: Print next steps
        print_next_steps()
        
        return 0
        
    except KeyboardInterrupt:
        print(f"\n\n{Colors.WARNING}Setup interrupted by user{Colors.ENDC}")
        return 1
    except Exception as e:
        print_error(f"\nSetup failed with error: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())

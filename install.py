"""
VFScore Installation Script
Interactive setup for new developers
"""

import os
import platform
import shutil
import subprocess
import sys
from pathlib import Path
from typing import Optional


def print_header(text: str) -> None:
    """Print a formatted header."""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70 + "\n")


def print_info(text: str) -> None:
    """Print info message."""
    print(f"ℹ️  {text}")


def print_success(text: str) -> None:
    """Print success message."""
    print(f"✅ {text}")


def print_error(text: str) -> None:
    """Print error message."""
    print(f"❌ {text}")


def print_warning(text: str) -> None:
    """Print warning message."""
    print(f"⚠️  {text}")


def prompt_input(prompt: str, default: Optional[str] = None, required: bool = True) -> str:
    """Prompt user for input with optional default."""
    if default:
        prompt_text = f"{prompt} [{default}]: "
    else:
        prompt_text = f"{prompt}: "
    
    while True:
        value = input(prompt_text).strip()
        
        if not value and default:
            return default
        
        if not value and required:
            print_warning("This field is required. Please enter a value.")
            continue
        
        return value


def prompt_yes_no(prompt: str, default: bool = True) -> bool:
    """Prompt user for yes/no answer."""
    default_str = "Y/n" if default else "y/N"
    while True:
        response = input(f"{prompt} [{default_str}]: ").strip().lower()
        
        if not response:
            return default
        
        if response in ['y', 'yes']:
            return True
        elif response in ['n', 'no']:
            return False
        else:
            print_warning("Please enter 'y' or 'n'")


def find_blender() -> Optional[str]:
    """Try to find Blender installation automatically."""
    system = platform.system()
    
    possible_paths = []
    
    if system == "Windows":
        possible_paths = [
            r"C:\Program Files\Blender Foundation\Blender 4.5\blender.exe",
            r"C:\Program Files\Blender Foundation\Blender 4.4\blender.exe",
            r"C:\Program Files\Blender Foundation\Blender 4.3\blender.exe",
            r"C:\Program Files (x86)\Blender Foundation\Blender 4.5\blender.exe",
        ]
    elif system == "Darwin":  # macOS
        possible_paths = [
            "/Applications/Blender.app/Contents/MacOS/Blender",
        ]
    elif system == "Linux":
        possible_paths = [
            "/usr/bin/blender",
            "/usr/local/bin/blender",
            str(Path.home() / "blender" / "blender"),
        ]
    
    for path in possible_paths:
        if Path(path).exists():
            return path
    
    return None


def check_python_version() -> bool:
    """Check if Python version is 3.11 or higher."""
    version = sys.version_info
    if version.major >= 3 and version.minor >= 11:
        print_success(f"Python {version.major}.{version.minor}.{version.micro} detected")
        return True
    else:
        print_error(f"Python {version.major}.{version.minor} detected, but 3.11+ is required")
        return False


def create_env_file(api_key: str, project_root: Path) -> None:
    """Create .env file with API keys."""
    env_path = project_root / ".env"
    
    with open(env_path, "w", encoding="utf-8") as f:
        f.write("# VFScore Environment Variables\n")
        f.write("# Generated by install.py\n\n")
        f.write("# Google Gemini API Key\n")
        f.write(f"GEMINI_API_KEY={api_key}\n\n")
        f.write("# OpenAI API Key (for Phase 2 - GPT-4V support)\n")
        f.write("# OPENAI_API_KEY=your_openai_api_key_here\n")
    
    print_success(f"Created .env file at {env_path}")


def create_local_config(blender_path: str, project_root: Path) -> None:
    """Create config.local.yaml with user-specific settings."""
    config_local_path = project_root / "config.local.yaml"
    config_template_path = project_root / "config.template.yaml"
    
    # Read template
    with open(config_template_path, "r", encoding="utf-8") as f:
        config_content = f.read()
    
    # Replace Blender path
    # Escape backslashes for Windows paths
    blender_path_escaped = blender_path.replace("\\", "\\\\")
    config_content = config_content.replace(
        'blender_exe: "BLENDER_PATH_PLACEHOLDER"',
        f'blender_exe: "{blender_path_escaped}"'
    )
    
    # Write local config
    with open(config_local_path, "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print_success(f"Created config.local.yaml at {config_local_path}")


def setup_virtualenv(project_root: Path) -> bool:
    """Set up Python virtual environment."""
    venv_path = project_root / "venv"
    
    if venv_path.exists():
        print_info("Virtual environment already exists")
        return True
    
    print_info("Creating virtual environment...")
    
    try:
        subprocess.run([sys.executable, "-m", "venv", str(venv_path)], check=True)
        print_success("Virtual environment created")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Failed to create virtual environment: {e}")
        return False


def install_dependencies(project_root: Path) -> bool:
    """Install Python dependencies."""
    venv_path = project_root / "venv"
    
    # Determine pip path based on OS
    if platform.system() == "Windows":
        pip_path = venv_path / "Scripts" / "pip.exe"
    else:
        pip_path = venv_path / "bin" / "pip"
    
    if not pip_path.exists():
        print_error(f"pip not found at {pip_path}")
        return False
    
    print_info("Installing dependencies (this may take several minutes)...")
    
    try:
        # Upgrade pip first
        subprocess.run([str(pip_path), "install", "--upgrade", "pip"], check=True)
        
        # Install package in editable mode
        subprocess.run([str(pip_path), "install", "-e", "."], check=True, cwd=str(project_root))
        
        print_success("Dependencies installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print_error(f"Failed to install dependencies: {e}")
        return False


def create_directories(project_root: Path) -> None:
    """Create necessary directories."""
    directories = [
        "datasets/refs",
        "datasets/gens",
        "metadata",
        "assets",
        "outputs",
    ]
    
    for dir_path in directories:
        full_path = project_root / dir_path
        full_path.mkdir(parents=True, exist_ok=True)
    
    print_success("Created project directories")


def get_activation_command(project_root: Path) -> str:
    """Get the command to activate virtual environment."""
    system = platform.system()
    
    if system == "Windows":
        return str(project_root / "venv" / "Scripts" / "activate")
    else:
        return f"source {project_root / 'venv' / 'bin' / 'activate'}"


def main():
    """Main installation function."""
    print_header("VFScore Installation")
    
    # Get project root
    project_root = Path(__file__).parent.absolute()
    print_info(f"Installing VFScore at: {project_root}")
    
    # Check Python version
    print_header("Step 1: Checking Python Version")
    if not check_python_version():
        print_error("Please install Python 3.11 or higher and try again")
        sys.exit(1)
    
    # Collect configuration
    print_header("Step 2: Configuration")
    
    # API Key
    print_info("You need a Gemini API key from: https://aistudio.google.com/app/apikey")
    api_key = prompt_input("Enter your Gemini API key", required=True)
    
    # Blender path
    print_info("\nSearching for Blender installation...")
    auto_blender = find_blender()
    
    if auto_blender:
        print_success(f"Found Blender at: {auto_blender}")
        use_auto = prompt_yes_no("Use this Blender installation?", default=True)
        if use_auto:
            blender_path = auto_blender
        else:
            blender_path = prompt_input("Enter Blender executable path", required=True)
    else:
        print_warning("Could not find Blender automatically")
        blender_path = prompt_input("Enter Blender executable path", required=True)
    
    # Verify Blender path
    if not Path(blender_path).exists():
        print_warning(f"Warning: Blender not found at {blender_path}")
        if not prompt_yes_no("Continue anyway?", default=False):
            sys.exit(1)
    
    # Create configuration files
    print_header("Step 3: Creating Configuration Files")
    create_env_file(api_key, project_root)
    create_local_config(blender_path, project_root)
    
    # Create directories
    print_header("Step 4: Creating Project Directories")
    create_directories(project_root)
    
    # Set up virtual environment
    print_header("Step 5: Setting Up Virtual Environment")
    if not setup_virtualenv(project_root):
        print_error("Failed to set up virtual environment")
        sys.exit(1)
    
    # Install dependencies
    print_header("Step 6: Installing Dependencies")
    install_deps = prompt_yes_no("Install Python dependencies now?", default=True)
    
    if install_deps:
        if not install_dependencies(project_root):
            print_warning("Some dependencies failed to install. You may need to install them manually.")
    else:
        print_info("Skipped dependency installation. You'll need to run:")
        print_info("  pip install -e .")
    
    # Final instructions
    print_header("Installation Complete!")
    
    print_success("VFScore has been set up successfully!\n")
    
    print("Next steps:\n")
    print(f"1. Activate the virtual environment:")
    if platform.system() == "Windows":
        print(f"   .\\venv\\Scripts\\activate")
    else:
        print(f"   source venv/bin/activate")
    
    if not install_deps:
        print("\n2. Install dependencies:")
        print("   pip install -e .")
    
    print(f"\n{'2' if install_deps else '3'}. Verify installation:")
    print("   python tests/test_setup.py")
    
    print(f"\n{'3' if install_deps else '4'}. Run your first pipeline:")
    print("   vfscore run-all --fast")
    
    print("\n" + "=" * 70)
    print("For more information, see INSTALL.md and README.md")
    print("=" * 70 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nInstallation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print_error(f"Installation failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
